<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[关于 js]]></title>
    <url>%2Fjs%2F</url>
    <content type="text"><![CDATA[对 js 的知识梳理与重点总结。 作用域全局作用域 全局作用域只有一个，且只有一个全局对象 window 创建的变量作为 window 的属性使用，创建的函数作为 window 的方法使用 全局作用域中的变量都是全局变量，在页面任意部位都可以访问到 全局变量只有在页面关闭时才会释放内存，否则会一直占据空间，消耗内存 局部作用域（函数作用域） 在全局作用域中定义的其他作用域都被称为局部作用域 局部作用域由函数创建，每个函数都会创建一个局部作用域 在函数作用域中可以访问到全局作用域中的变量，在全局作用域中访问不到局部作用域中的变量 局部变量会在函数调用完毕后自动释放内存 预解析 预解析就是把带有关键字声明的变量或函数进行提前声明或赋值。 预解析只能发生在当前作用域下。 变量 使用 var 声明的变量，会在当前作用域所有代码执行之前被声明，但不会赋值，若提前调用，会返回 undefined 在全局作用域中没有 var 声明的变量，该变量就不会被提前声明，若要提前调用，会报错 在函数作用域中没有 var 声明的变量，会变为隐式全局变量 函数 使用 函数声明 的形式创建的函数 function foo ( ) { }，会被提前声明，并且可以提前调用 使用函数表达式创建的函数 var foo = function ( ) { } ，不会被提前声明，所以也不能在声明前调用 递归递归函数是在一个函数通过名字调用自身的情况下构成的，递归一定要由结束条件。 1234567function factorial(num) &#123; if (num &lt;= 1) &#123; return 1; &#125; else &#123; return num * factorial(num - 1); &#125;&#125; 上面这个递归函数是比较经典的，但是我们改变原始函数的指向后就会发生报错。 123var anotherFactorial = factorial;factorial = null;alert(anotherFactorial(4)); 这里将 factorial 函数赋值给变量 anotherFactorial ，然后再将其设置为 null，那么在接下来的调用中就自然会报错。这里可以使用函数表达式的形式创建该递归函数来解决。 1234567var factorial = (function f(num) &#123; if (num &lt;= 1) &#123; return 1; &#125; else &#123; return num * f(num - 1); &#125;&#125;) 这样的话我们通过函数声明的方式创建了一个名为 f( ) 的函数，然后将它赋值给变量 factorial，这样即使函数被重新赋值，函数 f( ) 仍然有效，而且这种方法在严格模式和非严格模式都行得通。 闭包什么是闭包？闭包简单理解就是一个有权访问另一个函数作用域中的变量和数据的函数，简单的例子就是被嵌套的内部函数调用外部函数中的数据。 作用 缓存数据，让函数外部可以操作函数内部的数据 —— 局部变量一般在调用完毕后都会消失，但是通过闭包会仍然保存在内存中 延长作用域链 —— 创造闭包自然增加作用域链 1234567891011function f1() &#123; var num = 1; function f2() &#123; num++; console.log(num) &#125; return f2; &#125;f1(); // 1f1(); // 2f1(); // 3 上面的例子中，f1 外部函数调用完毕后，数据 num 并没有消失，而是仍旧存在内存中，可以循环使用，这里也就可以在函数外部不断操作它；通过创造闭包增加了内部函数，也就增加了一层作用域链。 12345678function f3() &#123; var num = 10; var obj = &#123; age: num &#125;; console.log(obj.age)&#125;f3(); // 10 除了上面构造内部函数的方式创造闭包，还有一种对象模式闭包。这个例子就是通过在内部创建一个对象，然后再对象中调用外部函数中的数据来创造闭包。两者只是形式不一样，创建方式和作用都相同。 原型作用共享数据，节省内存空间。 将需要共享的属性和方法直接定义在 prototype 对象中，他们会存在同一个内存地址中，因此还会提高运行效率。 prototype 和 _ proto __proto_ 是实例对象中的一个属性，也可以被看作一个对象，它是原型，不是标准的属性， 供浏览器使用。 prototype 是构造函数中的一个属性，也可以被看作一个对象，它是原型，也是标准的属性，供程序员使用，它默认有一个 constructor 属性，指向 prototype 对象所在函数。 原型链定义是指实例对象与原型对象之间的关系，通过原型（_proto_）来联系。 实例对象调用属性或方法的搜索原则当一个实例对象需要某个属性或方法时： 先从实例对象本身搜索 若找到，则返回该属性或方法的值 如果没有找到，则顺着原型链继续搜索该实例对象指向的原型对象 若找到，则返回该属性值 如果一直到原型链末端都没有找到，则返回 undefined 继承通过构造函数的方式12345678function Person(name,age) &#123; this.name = name; this.age = age;&#125;function Student(name,age,sex) &#123; Person.call(this,name,age); // 通过 构造函数.call() 的方法解决属性继承问题，并且继承的属性值不重复，不过不能继承方法 this.sex = sex;&#125; 通过改变原型指向方法12345678910function Person(name,age) &#123; this.name = name; this.age = age;&#125;Person.prototype.sayName = function () &#123; console.log('hello ' + this.name)&#125;Student.prototype = new Person() // 通过为实例对象的原型重新指向一个新的构造函数对象，来改变原型的指向，这里不传参数，就可以只继承方法var s1 = Student('张三', 18);s1.sayName() // hello 张三 this函数内 this 指向的不同场景函数的调用方式决定了 this 指向的不同： 调用方式 非严格模式 备注 普通函数调用 window 严格模式下是 undefined 构造函数调用 实例对象 原型方法中 this 也是实例对象 对象方法调用 该方法所属对象 紧挨着的对象 事件绑定方法 绑定事件对象 定时器函数 window 这就是对函数内部 this 指向的基本整理，写代码写多了自然而然就熟悉了。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS]]></title>
    <url>%2Fcss%2F</url>
    <content type="text"><![CDATA[这是对 CSS 总结的思维导图。 目录框架 选择器 Flexbox 布局 CSS：过渡 CSS：变换 CSS：动画 响应式网页设计 sass 基础 思维导图百度网盘 密码：orwr]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[仿了个静态页面 (2)]]></title>
    <url>%2F%E4%BB%BF%E4%BA%86%E4%B8%AA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2-2%2F</url>
    <content type="text"><![CDATA[前言这个页面除了对一些 CSS 技巧能够进一步理解，更多是对于之前布局知识的实践。 在线预览demo 总结这个页面因为主要是对布局的练习，所以没有像上个页面总结那么细碎的知识点。 主体框架的布局主要是用了之前两栏布局中的 float + margin-left 的方法（几种方法试用下来还是这个方法用起来更顺手一些）。 局部的一些小布局，像小图标与文本之类，用到了 float 和 position 的布局方式。 这个网页还用到了 分割线中间添加文字]]></content>
      <categories>
        <category>作品</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[仿了个静态页面 (1)]]></title>
    <url>%2F%E4%BB%BF%E4%BA%86%E4%B8%AA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2-1%2F</url>
    <content type="text"><![CDATA[前言这个页面只使用了 html + css ，这里主要为了验证一下自己对 html + css 的学习效果，同时为了更加熟悉学习到的一些技巧。 在线预览demo 知识点居中 方法 说明 margin: auto 当盒元素宽度确定时，可以使用 margin: auto 使其水平居中 text-align: center 这个方法可以对文本、图片等行内元素设置水平居中 line-height = height 把文字的行高与其本身高度设置相同，不过仅适用只有一行文字的情况 absolute + margin 为设置了 position: absolute 的元素设置其 left 或 top 属性为 50%，然后再通过 margin-left: -(元素宽度的一半)px 或 margin-top: -(元素高度的一半)px 将其拉至居中 absolute + translate 和上一个方法类似，不过使用了 CSS3 的属性，transform: translate(-50%,-50%) 可以直接使用百分比居中 背景透明 方法 说明 background: rgba(r,g,b,alpha) 这个方法可以使背景半透明化 background: red opacity: 0.5 opacity 虽然也有透明的作用，但是会使它的子元素也继承这个透明度 background: transparent transparent 是一种透明色，是完全透明的，透明度不可设置 white-space 空格处理 属性值 说明 normal 默认值；会把多个相邻空格合并成一个空格，换行则仅根据盒子大小自动换行 nowrap 表示不换行；也会合并空格，仅根据 &lt;br&gt; 标签换行，可以同 overflow text-overflow 属性一起使用 pre 保留空格不换行；不合并空格，根据源码中的换行和 &lt;br&gt; 标签换行 pre-wrap 保留空格换行；不合并空格，会根据盒子容器大小，源码中的换行和 &lt;br&gt; 标签进行换行 pre-line 合并空格且换行；会把多个相邻空格合并，换行方式与 pre-wrap 相同 hover 事件这个页面上有一处 hover 事件的动态效果，这里我是用 CSS 实现的。 代码如下（仅截取了主要代码片段）： 123.hover &#123; display: none;&#125; 这里是鼠标没有 hover 时把覆盖效果之后的 HTML 页面先隐藏。 123.main4&gt;div:hover .hover&#123; display: block;&#125; 然后在鼠标 hover 时再将 class 为 hover 的 HTML 显示。 所以处理这个 hover 事件主要用到的就是 display 布局。我们先把 hover 之后的页面写好，然后在没有 hover 效果时 display: none 将该页面隐藏，hover 之后 display: block 再显示页面。大致流程就是这样，也比较好理解。 总结页面上大部分 icon 图标的引用是通过 font-awesome ，页面的布局方式浮动、定位、flex 都有使用，不过多数使用了 flex 布局。 通过这个页面的练习，不仅让我对上面的知识点有了进一步的掌握，更让我熟悉了 CSS + DIV 布局和页面的搭建工作。]]></content>
      <categories>
        <category>作品</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三栏布局]]></title>
    <url>%2F%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[这里以左右两侧固定宽度300px ，中间部分随浏览器宽度自适应变化为例，总结三栏布局的方法。 基本 HTML : 12345&lt;body&gt; &lt;div class="left"&gt;&lt;/div&gt; &lt;div class="right"&gt;&lt;/div&gt; &lt;div class="main"&gt;&lt;/div&gt;&lt;/body&gt; 自身浮动法1234567891011121314151617181920212223html,body &#123; height: 100%;&#125;.left,.right &#123; width: 300px; height: 100%; background-color: #5295ff;&#125;.left &#123; float: left;&#125;.right &#123; float: right;&#125;.main &#123; height: 100%; margin: 0 300px; background-color: #ff6700;&#125; 这个方法最简单，左侧 float:left ，右侧 float:right ，中间主体实现自适应。不过就是 HTML 布局要将主体部分放在最后，左右栏随意布置。但是中间主体存在克星，clear:both 属性，如果要使用此方法，需避免明显的clear样式。 demo 绝对定位法1234567891011121314151617181920212223242526272829html &#123; height: 100%;&#125;body &#123; height: 100%; position: relative;&#125;.left,.right &#123; position: absolute; background-color: #5295ff; width: 300px; height: 100%;&#125;.left &#123; left: 0;&#125;.right &#123; right: 0;&#125;.main &#123; height: 100%; margin: 0 300px; background-color: #ff6700;&#125; 这个方法是左右两栏通过绝对定位固定在页面两侧，然后为中间的主体栏添加左右 margin 值撑开。这里左中右三栏的 HTML 布局顺序任意。 demo Flex 布局法123456789101112131415161718192021222324html &#123; height: 100%;&#125;body &#123; height: 100%; display: flex;&#125;.left,.right &#123; width: 300px; height: 100%; background-color: #5295ff;&#125;.right &#123; order: 1;&#125;.main &#123; flex: 1; height: 100%; background-color: #ff6700;&#125; Flex 方法也是简单好用的，不过还是因为兼容性的问题只适应现代浏览器。这里给右侧盒子添加 order:1 属性可以将它排在最后，否则根据上面 HTML 布局顺序，会出现在中间。然后给中间栏设置 flex:1 属性让他占满剩余的空间。 demo margin 负值法这个 HTML 代码和上面的方法有些不同。 123456789&lt;body&gt; &lt;div class="main"&gt; &lt;div class="body"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="left"&gt;&lt;/div&gt; &lt;div class="right"&gt;&lt;/div&gt;&lt;/body&gt; 123456789101112131415161718192021222324252627282930html,body &#123; height: 100%;&#125;.main &#123; width: 100%; height: 100%; float: left;&#125;.body &#123; background-color: #ff6700; height: 100%; margin: 0 300px;&#125;.left,.right &#123; float: left; background-color: #5295ff; width: 300px; height: 100%;&#125;.left &#123; margin-left: -100%;&#125;.right &#123; margin-left: -300px;&#125; 这个方法 HTML 布局顺序比较讲究，中间栏排第一，剩下左右两栏就比较随意。中间栏要用双层标签，外层宽度与浏览器相同，且浮动，内层设置 margin:0 300px 预留出左右两栏的位置。然后左右两栏设置浮动并通过 margin 负值定位，左栏 margin-left: -100% 刚好将它定位到页面最左侧，右栏 margin-left: -300px 则将它向左位移它本身的宽度定位到页面右侧。 demo]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>float</tag>
        <tag>position</tag>
        <tag>flex</tag>
        <tag>CSS 布局</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[两栏布局]]></title>
    <url>%2F%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[总结一下两栏布局的方法，这里以左侧栏固定，右侧栏自适应为例，当然反之同理。 先给出 HTML： 123456&lt;div class="float"&gt; &lt;div class="left"&gt;&lt;/div&gt; &lt;!--左侧栏固定宽度 300px，高度自适应--&gt; &lt;div class="right"&gt;&lt;/div&gt; &lt;!--右侧栏宽度、高度自适应--&gt;&lt;/div&gt; 双 float 方法1234567891011121314151617181920212223242526272829body,html &#123; height: 100%;&#125;.float &#123; height:100%; overflow: auto; box-sizing: content-box;&#125;.left &#123; float: left; width:300px; background-color: #ff6700; height:100%; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box;&#125;.right &#123; float: left; width: calc(100% - 300px); height:100%; background-color: #5295ff; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box;&#125; 这种方法是通过 calc() 方法来动态计算右侧栏宽度，不过需要提前知道右侧盒子距离左边的总距离。同时要设置子元素和父元素的 border-sizing ，这里设置了子元素的 box-sizing: border-box ，可以精确右侧盒子的计算宽度。不过因为这里用到了浮动，因此父元素需要清除浮动，这里用的是为父元素添加 overflow: auto 使其变为 BFC。 demo float+margin-left 方法123456789101112131415161718192021html,body &#123; height: 100%;&#125;.float &#123; height:100%; overflow: auto;&#125;.left &#123; float: left; width:300px; background-color: #ff6700; height:100%;&#125;.right &#123; margin-left: 300px; height:100%; background-color: #5295ff;&#125; 这个方法的原理是因为 block 元素会无视浮动元素，因此只需要为右侧盒子设置一个足够宽度的 margin-left ，就可以使他们同行排列。这个方法同样需要清除浮动。 demo absolute+margin-left方法123456789101112131415161718192021html,body &#123; height: 100%;&#125;.float &#123; height:100%; position: relative;&#125;.left &#123; position: absolute; width:300px; background-color: #ff6700; height: 100%;&#125;.right &#123; margin-left: 300px; height:100%; background-color: #5295ff;&#125; 这个方法与上面的方法类似，也是因为 block 元素会无视 absolute 定位的盒子，然后设置右侧盒子的 margin-left ，不过需要设置父元素的 position:relative 。但是这个方法父容器的高度由右侧盒子决定，如果左侧盒子高于右侧盒子，就会直接超出父容器。 demo float+BFC 方法123456789101112131415161718192021html,body &#123; height: 100%;&#125;.float &#123; height:100%; overflow: auto;&#125;.left &#123; float: left; width:300px; background-color: #ff6700; height:100%;&#125;.right &#123; overflow: auto; height: 100%; background-color: #5295ff;&#125; 这个方法是通过为右侧盒子添加 overflow:auto 使其形成 BFC，这样就不会无视掉浮动元素，同样的，父元素需要清除浮动。 demo flex 方法123456789101112131415161718192021html.body &#123; height: 100%;&#125;.float &#123; height:100%; display: flex; align-items: flex-start;&#125;.left &#123; width:300px; background-color: #ff6700; height:100%;&#125;.right &#123; flex: 1; height:100%; background-color: #5295ff;&#125; flex 方法是最方便简单的，但是他的兼容性只适用于现代浏览器。设置右侧盒子 flex:1 表示其占据父容器剩余空间的份数，这里让他占据全部剩余空间。align-items: flex-start 为了使盒子高度自适应，它的默认值 stretch 会使盒子高度自动拉伸至父容器高度。 demo]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>float</tag>
        <tag>position</tag>
        <tag>flex</tag>
        <tag>CSS 布局</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[清除浮动的方法和原理]]></title>
    <url>%2F%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[今天把清除浮动的所有方法总结一下，并分析一下他们的优缺点。然后找出当下最适合的清除浮动的方法（时间紧张的同学可以直接跳到最后 Orz）。 1）在浮动元素末尾添加额外标签a.添加空标签 &lt;div>示例：123456&lt;div class="clearfix"&gt; &lt;div class="left"&gt;&lt;/div&gt; &lt;div class="right"&gt;&lt;/div&gt; &lt;div style="clear:both;"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;/div&gt; 这是最早也是最简单的清除浮动的方法。但是在现在看来，这个方法会徒增许多无意义的空标签，有违结构与表现的分离，所以不推荐。 b.使用 &lt;br> 标签示例：123456&lt;div class="clearfix"&gt; &lt;div class="left"&gt;&lt;/div&gt; &lt;div class="right"&gt;&lt;/div&gt; &lt;br clear="all"&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;/div&gt; 这个方法比较小众，&lt;br&gt; 标签自带有 html 属性 clear ，他有三个可选值：left、right 和 all。他比 &lt;div&gt; 空标签的语义稍强，但他同样有违结构与表现的分离，随意也不推荐。 2）为父元素添加属性 overflow / float 这里涉及到一个知识点：BFC（ Block formatting contexts ）BFC：全称块级格式化上下文。用于对块级元素排版，默认情况下只有根元素（body）一个块级上下文。当触发以下条件时，会为块级元素生成一个独立的块级上下文： float 除了 none 以外的值 overflow 除了 visible 以外的值（hidden，auto，scroll ） display (table-cell，table-caption，inline-block) position（absolute，fixed） fieldset 元素 BFC 的特性： BFC 会阻止外边距叠加正常情况下，同一个 BFC 下两个子块级元素的垂直方向 margin 会发生叠加，而两个不同的 BFC 下的子元素之间就不会发生这种情况。 BFC 不会重叠浮动元素浏览器会给 BFC 创建隐式的 margin 来阻止他和其子浮动元素的 margin 叠加 BFC 通常可以包含浮动BFC 下的子浮动元素也会参与高度计算 a.overflow: hidden示例：12345&lt;div class="clearfix" style="overflow:hidden; *zoom:1;"&gt; &lt;div class="left"&gt;&lt;/div&gt; &lt;div class="right"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;/div&gt; 通过为父元素添加 overflow 属性并设置值 hidden，在IE6中还需要触发 hasLayout ，例如 zoom：1；然后使其变为一个 BFC，只要没有为父元素设置固定高度，浮动元素就会被包含在内，从而完成浮动的清除。不过这个方法在内容增多时可能会导致内容被裁剪，因此建议少用。 b.overflow: auto示例：12345&lt;div class="clearfix" style="overflow:auto; *zoom:1;"&gt; &lt;div class="left"&gt;&lt;/div&gt; &lt;div class="right"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;/div&gt; 这个方法在多个嵌套后，firefox某些情况会造成内容全选；IE中 mouseover 造成宽度改变时会出现最外层模块有滚动条等；firefox早期版本会无故产生focus等；因此也不建议使用。 c.float在父元素上同样加上浮动属性也可以清除浮动，但是这样会使与父元素相邻的元素布局受到影响，总不能一直浮动到 body，因此也不推荐使用。 3）在直接父元素上使用 :after 伪元素示例：123456&lt;div class="clearfix"&gt; &lt;div class="left"&gt;&lt;/div&gt; &lt;div class="right"&gt;&lt;/div&gt; &lt;br clear="all" /&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;/div&gt; 12345678910.clearfix:after &#123; content: "."; //content可以任意发挥 visibility:hidden; //隐藏 content 内容 display: block; //使生成的元素以块级元素显示,占满剩余空间 height: 0; //height: 0也行，避免生成的内容破坏原有布局高度 clear: both;&#125;.clearfix &#123; zoom: 1; //触发 IE hasLayout&#125; 这个方法就是通过 :after 伪元素在浮动元素直接父元素的最后添加了一个内容为 “.” 的块级元素。与我们最开始使用的添加空标签 &lt;div&gt; 的方法相似，并且语义化完全正确，因此十分推荐。不过要注意的一点，只有在父元素确定高度时才能使用哦。 小结总共分析了 6 种清除浮动的方法，并找出了最符合语义化，同时被各大浏览器所接受的方法——使用 :after 伪元素。因此，为了避免不必要的 bug，以及方便后期的维护，希望大家都能用起来。]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>float</tag>
        <tag>clear</tag>
        <tag>清除浮动</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML5]]></title>
    <url>%2FHTML5%2F</url>
    <content type="text"><![CDATA[在杠姐这首曲子下写作都变得特别有 feel 这个博客建了也有一段日子了，本意是想给自己一个输出的空间，但拖延症都快使我忘记了它。 新语义标签 对页面的不同部分增加了一些新语义标签 * &lt;article&gt; &lt;!--定义文章--&gt; * &lt;aside&gt; &lt;!--定义页面内容以外的内容--&gt; * &lt;details&gt; &lt;!--定义用户能够查看或者隐藏的细节--&gt; * &lt;figcaption&gt; &lt;!--定义 &lt;figure&gt; 元素的标题--&gt; * &lt;figure&gt; &lt;!--定义自包含内容，如图示、图表、照片、代码清单等--&gt; * &lt;footer&gt; &lt;!--定义文档或节的页脚--&gt; * &lt;header&gt; &lt;!--定义文档或节的页眉--&gt; * &lt;main&gt; &lt;!--定义文档的主内容--&gt; * &lt;mark&gt; &lt;!--定义重要或强调的文本--&gt; * &lt;nav&gt; &lt;!--定义导航链接--&gt; * &lt;section&gt; &lt;!--定义文档中的节（节是有主题的内容组，通常有标题）--&gt; * &lt;summary&gt; &lt;!--定义 &lt;details&gt; 元素的可见标题--&gt; * &lt;time&gt; &lt;!--定义日期或时间--&gt; 新表单新表单类型 * email &lt;!--只能输入email格式，自动带有验证功能 --&gt; * tel &lt;!--手机号码--&gt; * url &lt;!--只能输入url 格式--&gt; * number &lt;!--只能输入数字--&gt; * search &lt;!--搜索框--&gt; * range &lt;!--滑动条--&gt; * color &lt;!--拾色器--&gt; * time &lt;!--时间--&gt; * date &lt;!--日期--&gt; * --datetime &lt;!--时间日期--&gt; * month &lt;!--月份--&gt; * week &lt;!--星期--&gt; 新表单元素（标签）&lt;datalist&gt; 数据列表可以为 input 输入框添加自动提示 eg. 123456&lt;input type="text" list="myData"&gt; &lt;!--把 input 中的 list 属性与 datalist 进行绑定--&gt; &lt;datalist id="myData"&gt; &lt;option&gt;本科&lt;/option&gt; &lt;option&gt;研究生&lt;/option&gt; &lt;option&gt;不明&lt;/option&gt; &lt;/datalist&gt; 效果如下： 新表单属性 * placeholder &lt;!--占位符（提示文字）--&gt; * autofocus &lt;!--自动获取焦点--&gt; * multiple &lt;!--文件上传多选或多个邮箱地址--&gt; * autocomplete &lt;!--自动完成（填充的）。on 开启（默认），off 取消。用于表单元 素，也可用于表单自身(on/off)--&gt; * form &lt;!--指定表单项属于哪个form，处理复杂表单时会需要--&gt; * novalidate &lt;!--关闭默认的验证功能（只能加给form）--&gt; * required &lt;!--表示必填项--&gt; * pattern &lt;!--自定义正则，验证表单--&gt; 多媒体音频 &lt;audio&gt;1&lt;audio src="music/yinyue.mp3" autoplay controls&gt; &lt;/audio&gt; * autoplay &lt;!--自动播放，写成 autoplay 或者 autoplay = &quot;&quot;，都可以--&gt; * controls &lt;!--控制条（建议把这个选项写上，不然都看不到控件在哪里）--&gt; * loop &lt;!--循环播放--&gt; * preload &lt;!--预加载 同时设置 autoplay 时，此属性将失效--&gt; 音频格式的兼容性写法 123456&lt;audio controls loop&gt; &lt;source src="music/yinyue.mp3"/&gt; &lt;source src="music/yinyue.ogg"/&gt; &lt;source src="music/yinyue.wav"/&gt; 抱歉，你的浏览器暂不支持此音频格式&lt;/audio&gt; 视频 &lt;video&gt;1&lt;video src="video/movie.mp4" controls autoplay&gt;&lt;/video&gt; * autoplay &lt;!--自动播放，写成 autoplay 或者 autoplay = &quot;&quot;，都可以--&gt; * controls &lt;!--控制条（建议把这个选项写上，不然都看不到控件在哪里）--&gt; * loop &lt;!--循环播放--&gt; * preload &lt;!--预加载 同时设置 autoplay 时，此属性将失效--&gt; * width &lt;!--设置播放窗口宽度--&gt; * height &lt;!--设置播放窗口的高度--&gt; 视频格式的兼容性写法 123456&lt;video controls autoplay&gt; &lt;source src="video/movie.mp4"/&gt; &lt;source src="video/movie.ogg"/&gt; &lt;source src="video/movie.webm"/&gt; 抱歉，不支持此视频&lt;/video&gt; 思维导图关于 HTML5 还有一些其他的知识，在我总结的思维导图里比较全。 百度网盘 密码：3qwe]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
</search>
